package proto

import "encoding/json"

// Request -- запрос клиента к серверу.
type Request struct {
	// Поле Command может принимать три значения:
	// * "add" - передача нового элемента на сервер;
	// * "peak" - просьба посчитать количество пиков в последовательности
	// * "quit" - конец соединения
	Command string `json:"command"`

	// Если Command == "add", в поле Data должен лежать элемент
	// в виде структуры Element.
	// В противном случае, поле Data пустое.
	Data *json.RawMessage `json:"data"`

	// Идентификатор запроса, целое число от 0 до n = кол-во запросов
	Ident string `json:"ident"`
}

// Response -- ответ сервера клиенту.
type Response struct {
	// Поле Status может принимать три значения:
	// * "added" - успешное выполнение команды "quit" или "add";
	// * "failed" - в процессе выполнения команды произошла ошибка;
	// * "peak" - количество пиков в последовательности вычислено.
	// * "ok" - клиент отключен от сервера
	Status string `json:"status"`

	// Если Status == "failed", то в поле Data находится сообщение об ошибке.
	// Если Status == "peak", в поле Data должно лежать целое число
	// Если Status == "added", в поле Data лежит элемент в виде структуры Element
	// В противном случае, поле Data пустое.
	Data *json.RawMessage `json:"data"`

	// При правильно обработаном запросе содержит идентификатор запроса, целое число от 0 до n = кол-во запросов. Иначе -1
	Ident string `json:"ident"`
}

type Element struct {
	// Целое число(в десятичной системе, разрешён знак).
	Value string `json:"val"`

	// Новая позиция элемента(целое число, не больше длины последовательности)
	Index string `json:"ind"`
}
